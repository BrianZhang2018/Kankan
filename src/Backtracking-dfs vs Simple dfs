backtracking dfs: (refer the WordLadder2.java)

    if(exit condition){
        ....
        return;
    }

    for(..)
        dfs(..)
        results.remove(result.size()-1);

Simple dfs: (refer the Trie.java)
    1.
    if(exit condition)
            ....

     for(..)
         dfs(..)

     2.
     result = value;

     for()
        newValue = dfs()
        if()
            result=newValue;

2. 需要理解一下下面的:
Backtracking is a more general purpose algorithm.

Depth-First search is a specific form of backtracking related to searching tree structures.

3. Two way to record and recover the state by backtracking
traditionaly:
boolean[][] visited = new boolean[][];

Modify the value in matrix:
board[][] is the input matrix;
e.g.
    Character c = board[row][col];
    board[row][col] = '#';
    boolean existed = dfs(row -1, col, index, board, word) || dfs(row + 1, col, index, board, word ) || dfs(row, col + 1, index, board, word) 
                        || dfs(row, col-1, index, board, word);
    board[row][col] = c;

leetcode: word search I, II