depth-first search (DFS) is "far more space efficient" than breadth-first search (BFS)

DFS algorithm the maximum stack depth is equal to the maximum distance from the origin vertex
in the DFS traversal. In BFS algorithm (as in the aforementioned pseudo-DFS) the maximum queue size
is equal to the width of the largest vertex discovery front.

The most prominent and extreme example that illustrates the difference in peak memory consumption
between DFS and BFS (as well as pseudo-DFS) is a star-graph: a single central vertex surrounded
by a large number (say, 1000) of peripheral vertices, with each peripheral vertex connected to
the central vertex by an edge. If you run BFS on this graph using the central vertex as origin,
the queue size will immediately jump to 1000. The same thing will obviously happen if you use
pseudo-DFS (i.e. if you simply replace the queue with a stack). But classic DFS algorithm will
need stack depth of only 1 (!) to traverse this entire graph. See the difference? 1000 versus 1.
This is what is meant by better space efficiency of DFS.

BFS - level traverse

套路：
    BFS:

    boolean[].. visited
    Queue queue
    //direction matrix
    int[][] dicts = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
    queue.add(start)
    visited[start] = true

    while(!queue.isEmpty){
      curr = queue.poll();

      for(int[] dict : dicts)
           int nr = curr[0] + d[0];
           int nc = curr[1] + d[1];

            if(some check condition)
                continue;
            visited[nr][nc] = true;
            queue.add(new int[]{nr, nc});
    }
example: /Users/brianzhang/workspace/WaWahaha/src/category/BFS/TheMaze.java
=============================================
    DFS:
    boolean[].. visited

    for(row=0; row<rowLength; row++)
     for(column=0; column<columnLength; cloumn++)
            if(meet the condition)
                  dfs(...)

    dfs(...){
        if(exit condition)
            return;
        visited[].. = true;
        dfs(grid, visited, i - 1, j);
        dfs(grid, visited, i + 1, j);
        dfs(grid, visited, i, j - 1);
        dfs(grid, visited, i, j + 1);
    }

example:
/Users/brianzhang/workspace/WaWahaha/src/category/DFS/NumsOfIsland.java

=================================================
BFS： find shortest path

BFS to find shortest path if graph or matrix is unweighted.
Psudo code:
...
int level = 0;  //level also means need hwo much steps to find the element
while(!queue.isEmpty){
       int size = queue.size;
       //loop the current level, the above normal BFS don't need this loop.
       for(i=0; i<size; i++)
          curr = queue.poll();
       ...
       if(found)
           return level;
       ...
       level++;
}
...

e.g /Users/brianzhang/workspace/WaWahaha/src/category/BFSAndDFS/ShortestBridge934.java
/Users/brianzhang/workspace/WaWahaha/src/category/BFS/minimumsteps/CutOffTreesForGolfEventBFSGetMinSteps.java