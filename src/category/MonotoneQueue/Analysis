https://leetcode.com/problems/trapping-rain-water/discuss/244167/A-general-stack-approach-you-can-solve-42-84-85


Basic idea is to maintain a monotonic stack. In this question, we keep a decreasing order, once the current height is larger than the height [stack.peek()] we start to calculate the water.

public int trap(int[] height) {
	int water = 0, curWater = 0;
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < height.length; i++) {
            int h = height[i];
            while (!stack.isEmpty() && h > height[stack.peek()]) {
                int top = stack.pop();
                int start = stack.isEmpty() ? i-1 : stack.peek();
                curWater = (Math.min(height[start], h) - height[top]) * (i - start - 1);
                water += curWater;
            }
            stack.push(i);
        }
        return water;
}
You just need to modify the calculation part: Here is my solution for LeetCode 84 LargestRectangleinHistrogram, this time we maintain an increasing stack:

public int largestRectangleArea(int[] heights) {
        if (heights == null || heights.length == 0) return 0;
        Stack<Integer> stack = new Stack<>();
        int area, max = 0;
        int len = heights.length;
        for (int i = 0 ; i <= len; i++) {
            int height = (i == len) ? 0 : heights[i];
            while (!stack.isEmpty() && height < heights[stack.peek()]) {
                int top = stack.pop();
                int start = stack.isEmpty()? -1: stack.peek();
                area = heights[top] * (i - start - 1);
                max = Math.max(max, area);
            }
            stack.push(i);

        }
        return max;


    }
As for the LeetCode 85, you can use the same approach in 84, just need to calculate each row and treat each row as a histogram.