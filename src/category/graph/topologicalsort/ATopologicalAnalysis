https://www.youtube.com/watch?v=x3mm5a_CwRM&list=PL7UgfcaT7w6siyCWafk5GfnYwkg-4_pcy&index=2&t=0s

如果有环是不行的，因为vertex成为自己前驱vertex，就是自己要在自己之前完成，这个是不可能的。参照上面的video link 有详解。
用来检查DAG (Directed acyclic graph)（有向无环图)

Some statement for tree in graph theory:

(1) A tree is an undirected graph in which any two vertices are
connected by exactly one path.

(2) Any connected graph who has n nodes with n-1 edges is a tree.

(3) The degree of a vertex of a graph is the number of
edges incident(incoming) to the vertex.

(4) A leaf is a vertex of degree 1. An internal vertex is a vertex of
degree at least 2.

(5) A path graph is a tree with two or more vertices that is not
branched at all.

(6) A tree is called a rooted tree if one vertex has been designated
the root.

(7) The height of a rooted tree is the number of edges on the longest
downward path between root and a leaf.


套路: (code example from TopologicalSortBFS.java)

1. Construct the graph (map), and inDegree array
       //initiate the graph
        for (int i = 0; i < n; ++i)
            graph[i] = new ArrayList<>();

        for (int[] e : prerequisites) {
            graph[e[1]].add(e[0]); // e[1] is the prerequisite course of e[0]
            inDegree[e[0]]++; // e[1]->e[0], so inDegree[e[0]]++
        }

2. Collect the elements which inDegree is "0" which means element don't have precede element, so they are current prerequisite course.

       //find the start node -> inDegree = 0, 没有前驱节点
        for (int i = 0; i < n; ++i)
            if (inDegree[i] == 0)
                bfs.add(i); //把入度为零的vertex放入list, 看做remove the vertex which "inDegree=0" and add into the list,


3. Get the adjacent elements and reduce the inDegree

        for (int i = 0; i < bfs.size(); ++i){// then, "--inDegree" the precede vertex (prerequisite course) has done, and recursive the same logic
            for (int j : graph[bfs.get(i)]){
                if (--inDegree[j] == 0) // it's a new current prerequisite course
                    bfs.add(j);
            }
        }