1. Find middle node by "slow-and-fast-pointer" in the LinkedList:

We can use the two pointer approach for finding out the middle element of a linked list. Essentially, 
we have two pointers called "slow_ptr" and "fast_ptr". The slow_ptr moves "one node" at a time whereas the fast_ptr moves
"two nodes" at a time. By the time the fast_ptr reaches the end of the linked list, the slow_ptr would have reached
the middle element of the linked list. 
For an even sized list, any of the two middle elements can act as the root of the BST.

2. Commonly used to check when iterate the LinkedList, whatever find a cycle in the LinkedList or find the middle element of LinkedList

while(fast != null && fast.next !=null) {
     left = slow;
     slow = slow.next;
     fast = fast.next.next;
}
