Single host - topK algorithm (priorityQueue) - not scalable

Multiple hosts - Count min sketch - use an amazing data structure with fixed size memory (two dimensional table + "N" hash functions)
                 1. process a large data set with low memory consumption
                 2. not 100% accuracy


https://www.youtube.com/watch?v=kx-XDoPjoHw&t=167s
https://www.geeksforgeeks.org/count-min-sketch-in-java-with-examples/

Accuracy:
We have observed that the Count-min sketch is a good choice in a situation where we have to process a large data set with
low memory consumption. We also saw that the more accurate result we want the number of hash functions(rows/width) has to be increased.


=============================================================
https://soulmachine.gitbooks.io/system-design/content/cn/bigdata/heavy-hitters.html

方案2: 多机HashMap + Heap
可以把数据进行分片。假设有8台机器，第1台机器只处理hash(elem)%8==0的元素，第2台机器只处理hash(elem)%8==1的元素，以此类推。
每台机器都有一个HashMap和一个 Heap, 各自独立计算出 top k 的元素
把每台机器的Heap，通过网络汇总到一台机器上，将多个Heap合并成一个Heap，就可以计算出总的 top k 个元素了


方案3: Count-Min Sketch + Heap
既然方案1中的HashMap太大，内存装不小，那么可以用Count-Min Sketch算法代替HashMap，

在数据流不断流入的过程中，维护一个标准的Count-Min Sketch 二维数组
维护一个小根堆，容量为k
每次来一个新元素，
将相应的sketch增1
在堆中查找该元素，如果找到，把堆里的计数器也增1，并调整堆；如果没有找到，把这个元素的sketch作为钙元素的频率的近似值，跟堆顶元素比较，如果大于堆丁元素的频率，则把堆丁元素替换为该元素，并调整堆

这个方法的时间复杂度和空间复杂度如下：

空间复杂度O(dm)。m是二维数组的列数，d是二维数组的行数，堆需要O(k)的空间，不过k通常很小，堆的空间可以忽略不计
时间复杂度O(nlogk)。每次来一个新元素，需要在二维数组里查找一下，需要O(1)的时间；然后要在堆里查找一下，O(logk)的时间，有可能需要调堆，又需要O(logk)的时间，总的时间复杂度是O(nlogk)。

